border Gamma1(t=0,1){x=10*pi*t; y = 0;};
border Gamma2(t=0,1){x=10*pi;y=pi*t;};
border Gamma3(t=1,0){x=10*pi*t;y=pi;};
border Gamma4(t=0,1){x=0;y=pi-pi*t;};

mesh Th = buildmesh(Gamma1(80) + Gamma2(10) + Gamma3(80) + Gamma4(10));

//Evolución temporal
real tmax = 20, dt = 0.07, idt2 = 1./(dt*dt);

//Espacio EF
fespace Vh(Th, P1);

//Formulacion debil
Vh u, v, uold = 0, vold = 0, uvold=0, xh,yh;
macro grad(u) [dx(u), dy(u)]//

problem Wave(u,v) = int2d(Th)(idt2*u*v)-int2d(Th)(2*idt2*uold*v)
                    + int2d(Th)(idt2*uold*v)
                    + int2d(Th)(grad(uold)'*grad(v))
                    ;

//Time loop
real t = 0; int iter = 0, nplot = 2;

//Condición inicial
uvold = (2*sin(x-xh) + 2*cos(y-yh));
uold = uvold;
u = uold;

int verb = 0;
while(t<=tmax){
    iter++; t+=dt; Wave;
    if(!(iter%nplot)){
        plot(u, cmm = "Wave t=" + t, fill=1, dim=2);
        cout <<"t="<<t<< "u min="<<u[].min<< "u max="<<u[].max <<endl;
        uvold = uold;
        uold = u;
    }
}